//Task
//Your task is to sum the differences between consecutive pairs in the array in descending order.
//Example
//[2, 1, 10]  -->  9
//In descending order: [10, 2, 1]
//Sum: (10 - 2) + (2 - 1) = 8 + 1 = 9
//If the array is empty or the array has only one element the result should be 0


//Answer
function sumOfDifferences(arr) {
  let result = 0
  if (arr.length === 0 || arr.length === 1){
    return 0
  } else{ 
  let desOrder = arr.sort((a, b) => b - a)
  for (let i = 0; i < desOrder.length - 1; i++){
    result += desOrder[i] - desOrder[i + 1]
  }
  } return result; 
}


//another answer that I get with more understanding of arrays/sorting:

function sumOfDifferences(arr) {
    return arr.length > 1 ? Math.max(...arr) - Math.min(...arr) : 0;
}

//explanation:
//The concept here is more related to understanding the properties of sorted arrays and the relationships between the minimum, 
//maximum, and differences in consecutive pairs. It's not necessarily a formal mathematical rule that you need to memorize but 
//rather an observation based on how sorting and subtraction work. 
//Here's a breakdown:
//Sorting:

